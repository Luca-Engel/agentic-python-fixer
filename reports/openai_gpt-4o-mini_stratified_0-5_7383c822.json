[
  {
    "task_id": "Python_38",
    "status": "fail",
    "nb_trajectory_elems": 16,
    "latest_code": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):(3 * i + 3)] for i in range((len(s) + 2) // 3)]\n\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    '''\ntakes as input string encoded with encode_cyclic function. Returns decoded string.\n    '''\n    return encode_cyclic(s[::-1])"
  },
  {
    "task_id": "Python_5",
    "status": "fail",
    "nb_trajectory_elems": 16,
    "latest_code": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    '''\nInsert a number 'delimeter' between every two consecutive elements of input list `numbers'\n>>> intersperse([], 4)\n[]\n>>> intersperse([1, 2, 3], 4)\n[1, 4, 2, 4, 3]\n    '''\n    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])"
  },
  {
    "task_id": "Python_143",
    "status": "fail",
    "nb_trajectory_elems": 16,
    "latest_code": "def words_in_sentence(sentence):\n    '''\nYou are given a string representing a sentence,\nthe sentence contains some words separated by a space,\nand you have to return a string that contains the words from the original sentence,\nwhose lengths are prime numbers,\nthe order of the words in the new string should be the same as the original one.\nExample 1:\nInput: sentence = \"This is a test\"\nOutput: \"is\"\nExample 2:\nInput: sentence = \"lets go for swimming\"\nOutput: \"go for\"\nConstraints:\n* 1 <= len(sentence) <= 100\n* sentence contains only letters\n    '''\n    new_lst = []\n    for word in sentence.split():\n        flg = 0\n    flg = 0\n\n\n    for i in range(2, len(word)):\n\n\n                flg = 1\n    if flg == 0 and len(word) > 2:\n\n            new_lst.append(word)\n    return \" \".join(new_lst)"
  },
  {
    "task_id": "Python_54",
    "status": "fail",
    "nb_trajectory_elems": 16,
    "latest_code": "def same_chars(s0: str, s1: str):\n    '''\nCheck if two words have the same characters.\n>>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\nTrue\n>>> same_chars('abcd', 'dddddddabc')\nTrue\n>>> same_chars('dddddddabc', 'abcd')\nTrue\n>>> same_chars('eabcd', 'dddddddabc')\nFalse\n>>> same_chars('abcd', 'dddddddabce')\nFalse\n>>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\nFalse\n    '''\n    return sorted(s0) == sorted(s1)"
  },
  {
    "task_id": "Python_161",
    "status": "fail",
    "nb_trajectory_elems": 16,
    "latest_code": "def solve(s):\n    '''\nYou are given a string s.\nif s[i] is a letter, reverse its case from lower to upper or vise versa,\notherwise keep it as it is.\nIf the string contains no letters, reverse the string.\nThe function should return the resulted string.\nExamples\nsolve(\"1234\") = \"4321\"\nsolve(\"ab\") = \"AB\"\nsolve(\"#a@C\") = \"#A@c\"\n    '''\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n    new_str[idx] = i.swapcase()\n    flg = 1\n    idx += 1\n\n\n\n\n\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s"
  },
  {
    "task_id": "Python_155",
    "status": "fail",
    "nb_trajectory_elems": 16,
    "latest_code": "def even_odd_count(num):\n    '''\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\nExample:\neven_odd_count(-12) ==> (1, 1)\neven_odd_count(123) ==> (1, 2)\n    '''\n    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n    even_count += 1\n\n\n\n\n\n    return (even_count, odd_count)"
  },
  {
    "task_id": "Python_19",
    "status": "pass",
    "nb_trajectory_elems": 7,
    "latest_code": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    '''\nInput is a space-delimited string of numberals from 'zero' to 'nine'.\nValid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\nReturn the string with numbers sorted from smallest to largest\n>>> sort_numbers('three one five')\n'one three five'\n    '''\n    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    if not numbers: return ''\n\n    return ' '.join(sorted(numbers.split(' '), key=lambda x: value_map[x]))"
  },
  {
    "task_id": "Python_157",
    "status": "pass",
    "nb_trajectory_elems": 7,
    "latest_code": "def right_angle_triangle(a, b, c):\n    '''\nGiven the lengths of the three sides of a triangle. Return True if the three\nsides form a right-angled triangle, False otherwise.\nA right-angled triangle is a triangle in which one angle is right angle or\n90 degree.\nExample:\nright_angle_triangle(3, 4, 5) == True\nright_angle_triangle(1, 2, 3) == False\n    '''\n    return a*a + b*b == c*c or a*a + c*c == b*b or b*b + c*c == a*a"
  },
  {
    "task_id": "Python_16",
    "status": "pass",
    "nb_trajectory_elems": 4,
    "latest_code": "def count_distinct_characters(string: str) -> int:\n    '''\nGiven a string, find out how many distinct characters (regardless of case) does it consist of\n>>> count_distinct_characters('xyzXYZ')\n3\n>>> count_distinct_characters('Jerry')\n4\n    '''\n    return len(set(char.lower() for char in string))"
  },
  {
    "task_id": "Python_141",
    "status": "fail",
    "nb_trajectory_elems": 16,
    "latest_code": "def file_name_check(file_name):\n    '''\nCreate a function which takes a string representing a file's name, and returns\n'Yes' if the the file's name is valid, and returns 'No' otherwise.\nA file's name is considered to be valid if and only if all the following conditions\nare met:\n- There should not be more than three digits ('0'-'9') in the file's name.\n- The file's name contains exactly one dot '.'\n- The substring before the dot should not be empty, and it starts with a letter from\nthe latin alphapet ('a'-'z' and 'A'-'Z').\n- The substring after the dot should be one of these: ['txt', 'exe', 'dll']\nExamples:\nfile_name_check(\"example.txt\") # => 'Yes'\nfile_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    '''\n    suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n    if len(lst) != 2:\n        return 'No'\n    if len(lst[0]) == 0:\n        return 'No'\n    if not lst[0][0].isalpha():\n        return 'No'\n    t = len([x for x in lst[0] if x.isdigit() and x != '0'])\n\n\n\n\n\n    if t > 3:\n        return 'No'\n    return 'Yes'"
  },
  {
    "task_id": "Python_105",
    "status": "fail",
    "nb_trajectory_elems": 16,
    "latest_code": "def by_length(arr):\n    '''\nGiven an array of integers, sort the integers that are between 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\narr = [2, 1, 1, 4, 5, 8, 2, 3]\n-> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n-> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\nreturn [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nIf the array is empty, return an empty array:\narr = []\nreturn []\nIf the array has any strange number ignore it:\narr = [1, -1 , 55]\n-> sort arr -> [-1, 1, 55]\n-> reverse arr -> [55, 1, -1]\n    sorted_arr = [var for var in sorted_arr if 1 <= var <= 9]\n\n\n\n\n\n    '''\n    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr"
  },
  {
    "task_id": "Python_10",
    "status": "pass",
    "nb_trajectory_elems": 4,
    "latest_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    '''\nFind the shortest palindrome that begins with a supplied string.\nAlgorithm idea is simple:\n- Find the longest postfix of supplied string that is a palindrome.\n- Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n>>> make_palindrome('')\n''\n>>> make_palindrome('cat')\n'catac'\n>>> make_palindrome('cata')\n'catac'\n    '''\n    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]"
  },
  {
    "task_id": "Python_122",
    "status": "pass",
    "nb_trajectory_elems": 4,
    "latest_code": "def add_elements(arr, k):\n    '''\nGiven a non-empty array of integers arr and an integer k, return\nthe sum of the elements with at most two digits from the first k elements of arr.\nExample:\nInput: arr = [111,21,3,4000,5,6,7,8,9], k = 4\nOutput: 24 # sum of 21 + 3\nConstraints:\n1. 1 <= len(arr) <= 100\n2. 1 <= k <= len(arr)\n    '''\n    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)"
  },
  {
    "task_id": "Python_79",
    "status": "pass",
    "nb_trajectory_elems": 4,
    "latest_code": "def decimal_to_binary(decimal):\n    '''\nYou will be given a number in decimal form and your task is to convert it to\nbinary format. The function should return a string, with each character representing a binary\nnumber. Each character in the string will be '0' or '1'.\nThere will be an extra couple of characters 'db' at the beginning and at the end of the string.\nThe extra characters are there to help with the format.\nExamples:\ndecimal_to_binary(15)   # returns \"db1111db\"\ndecimal_to_binary(32)   # returns \"db100000db\"\n    '''\n    return \"db\" + bin(decimal)[2:] + \"db\""
  },
  {
    "task_id": "Python_158",
    "status": "pass",
    "nb_trajectory_elems": 7,
    "latest_code": "def find_max(words):\n    '''\nWrite a function that accepts a list of strings.\nThe list contains different words. Return the word with maximum number\nof unique characters. If multiple strings have maximum number of unique\ncharacters, return the one which comes first in lexicographical order.\nfind_max([\"name\", \"of\", \"string\"]) == \"string\"\nfind_max([\"name\", \"enam\", \"game\"]) == \"enam\"\nfind_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    '''\n    return min([w for w in words if len(set(w)) == max(len(set(word)) for word in words)])"
  },
  {
    "task_id": "Python_0",
    "status": "fail",
    "nb_trajectory_elems": 16,
    "latest_code": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    '''\nCheck if in given list of numbers, are any two numbers closer to each other than\ngiven threshold.\n>>> has_close_elements([1.0, 2.0, 3.0], 0.5)\nFalse\n>>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\nTrue\n    '''\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n    distance = abs(elem - elem2)\n\n\n\n\n\n                if distance < threshold:\n                    return True\n\n    return False"
  },
  {
    "task_id": "Python_149",
    "status": "pass",
    "nb_trajectory_elems": 4,
    "latest_code": "def sorted_list_sum(lst):\n    '''\nWrite a function that accepts a list of strings as a parameter,\ndeletes the strings that have odd lengths from it,\nand returns the resulted list with a sorted order,\nThe list is always a list of strings and never an array of numbers,\nand it may contain duplicates.\nThe order of the list should be ascending by length of each word, and you\nshould return the list sorted by that rule.\nIf two words have the same length, sort the list alphabetically.\nThe function should return a list of strings in sorted order.\nYou may assume that all words will have the same length.\nFor example:\nassert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\nassert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    '''\n    lst.sort(key=lambda x: (len(x), x))\n\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return new_lst"
  },
  {
    "task_id": "Python_26",
    "status": "pass",
    "nb_trajectory_elems": 4,
    "latest_code": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    '''\nFrom a list of integers, remove all elements that occur more than once.\nKeep order of elements left the same as in the input.\n>>> remove_duplicates([1, 2, 3, 2, 4])\n[1, 3, 4]\n    '''\n    import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] == 1]"
  },
  {
    "task_id": "Python_30",
    "status": "pass",
    "nb_trajectory_elems": 4,
    "latest_code": "def get_positive(l: list):\n    '''\nReturn only positive numbers in the list.\n>>> get_positive([-1, 2, -4, 5, 6])\n[2, 5, 6]\n>>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n[5, 3, 2, 3, 9, 123, 1]\n    '''\n    return [e for e in l if e > 0]"
  },
  {
    "task_id": "Python_72",
    "status": "fail",
    "nb_trajectory_elems": 16,
    "latest_code": "def will_it_fly(q,w):\n    '''\nWrite a function that returns True if the object q will fly, and False otherwise.\nThe object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\nExample:\nwill_it_fly([1, 2], 5) \u279e False\n# 1+2 is less than the maximum possible weight, but it's unbalanced.\nwill_it_fly([3, 2, 3], 1) \u279e False\n# it's balanced, but 3+2+3 is more than the maximum possible weight.\nwill_it_fly([3, 2, 3], 9) \u279e True\n# 3+2+3 is less than the maximum possible weight, and it's balanced.\nwill_it_fly([3], 5) \u279e True\n# 3 is less than the maximum possible weight, and it's balanced.\n    '''\n    if sum(q) > w:\n        return False\n\n    i, j = 0, len(q)-1\n    while i<j:\n        if q[i] == q[j]:\n    return True\n\n\n\n\n\n        i+=1\n        j-=1\n    return True"
  },
  {
    "task_id": "Python_88",
    "status": "pass",
    "nb_trajectory_elems": 7,
    "latest_code": "def sort_array(array):\n    '''\nGiven an array of non-negative integers, return a copy of the given array after sorting,\nyou will sort the given array in ascending order if the sum( first index value, last index value) is odd,\nor sort it in descending order if the sum( first index value, last index value) is even.\nNote:\n* don't change the given array.\nExamples:\n* sort_array([]) => []\n* sort_array([5]) => [5]\n* sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n* sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    '''\n    if not array: return []\n\n    return sorted(array) if (array[0]+array[-1]) % 2 != 0 else sorted(array, reverse=True)"
  },
  {
    "task_id": "Python_1",
    "status": "fail",
    "nb_trajectory_elems": 16,
    "latest_code": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    '''\nInput to this function is a string containing multiple groups of nested parentheses. Your goal is to\nseparate those group into separate strings and return the list of those.\nSeparate groups are balanced (each open brace is properly closed) and not nested within each other\nIgnore any spaces in the input string.\n>>> separate_paren_groups('( ) (( )) (( )( ))')\n['()', '(())', '(()())']\n    '''\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n        if current_depth == 0:\n                        result.append(''.join(current_string))\n                        current_string.clear()\n\n    if current_depth < 0:\n\n    pass\n\n\n\n                current_string.clear()\n\n    return result"
  },
  {
    "task_id": "Python_80",
    "status": "fail",
    "nb_trajectory_elems": 16,
    "latest_code": "def is_happy(s):\n    '''\nYou are given a string s.\nYour task is to check if the string is happy or not.\nA string is happy if its length is at least 3 and every 3 consecutive letters are distinct\nFor example:\nis_happy(a) => False\nis_happy(aa) => False\nis_happy(abcd) => True\nis_happy(aabb) => False\nis_happy(adb) => True\nis_happy(xyy) => False\n    '''\n    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n    if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n\n\n\n\n\n        return False\n    return True"
  },
  {
    "task_id": "Python_133",
    "status": "fail",
    "nb_trajectory_elems": 16,
    "latest_code": "def sum_squares(lst):\n    '''\nYou are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n    '''\n    import math\n    squared = 0\n    for i in lst:\n    squared += math.ceil(i)**2\n\n\n\n\n\n    return squared"
  },
  {
    "task_id": "Python_95",
    "status": "fail",
    "nb_trajectory_elems": 16,
    "latest_code": "def check_dict_case(dict):\n    '''\nGiven a dictionary, return True if all keys are strings in lower\ncase or all keys are strings in upper case, else return False.\nThe function should return False is the given dictionary is empty.\nExamples:\ncheck_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\ncheck_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\ncheck_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\ncheck_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\ncheck_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    '''\n    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n    if (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n\n\n\n\n\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\""
  },
  {
    "task_id": "Python_57",
    "status": "fail",
    "nb_trajectory_elems": 16,
    "latest_code": "def monotonic(l: list):\n    '''\nReturn True is list elements are monotonically increasing or decreasing.\n>>> monotonic([1, 2, 4, 20])\nTrue\n>>> monotonic([1, 20, 4, 10])\nFalse\n>>> monotonic([4, 1, 0, -10])\nTrue\n    '''\n    if l == sorted(l) or l == sorted(l, reverse=True):\n    return True\n\n\n\n\n\n    return True"
  },
  {
    "task_id": "Python_117",
    "status": "fail",
    "nb_trajectory_elems": 16,
    "latest_code": "def select_words(s, n):\n    '''\nGiven a string s and a natural number n, you have been tasked to implement\na function that returns a list of all words from string s that contain exactly\nn consonants, in order these words appear in the string s.\nIf the string s is empty then the function should return an empty list.\nNote: you may assume the input string contains only letters and spaces.\nExamples:\nselect_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\nselect_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\nselect_words(\"simple white space\", 2) ==> []\nselect_words(\"Hello world\", 4) ==> [\"world\"]\nselect_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    '''\n    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n    if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n\n\n\n\n\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result"
  },
  {
    "task_id": "Python_70",
    "status": "fail",
    "nb_trajectory_elems": 16,
    "latest_code": "def strange_sort_list(lst):\n    '''\nGiven list of integers, return list in strange order.\nStrange sorting, is when you start with the minimum value,\nthen maximum of the remaining integers, then minimum and so on.\nExamples:\nstrange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\nstrange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\nstrange_sort_list([]) == []\n    '''\n    res, switch = [], False\n    while lst:\n    res.append(min(lst) if switch else max(lst))\n\n\n\n\n\n        lst.remove(res[-1])\n        switch = not switch\n    return res"
  },
  {
    "task_id": "Python_36",
    "status": "fail",
    "nb_trajectory_elems": 16,
    "latest_code": "def fizz_buzz(n: int):\n    '''\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n    '''\n    ns = []\n    for i in range(n):\n    if i % 11 == 0 or i % 13 == 0:\n\n\n\n\n\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans"
  },
  {
    "task_id": "Python_21",
    "status": "pass",
    "nb_trajectory_elems": 4,
    "latest_code": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    '''\nGiven list of numbers (of at least two elements), apply a linear transform to that list,\nsuch that the smallest number will become 0 and the largest will become 1\n>>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n[0.0, 0.25, 0.5, 0.75, 1.0]\n    '''\n    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]"
  },
  {
    "task_id": "Python_145",
    "status": "fail",
    "nb_trajectory_elems": 16,
    "latest_code": "def order_by_points(nums):\n    '''\nWrite a function which sorts the given list of integers\nin ascending order according to the sum of their digits.\nNote: if there are several items with similar sum of their digits,\norder them based on their index in original list.\nFor example:\n>>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n>>> order_by_points([]) == []\n    '''\n    def digits_sum(n):\n        neg = 1\n    if n < 0: neg, n = -1, -n\n\n\n\n\n\n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)"
  },
  {
    "task_id": "Python_150",
    "status": "fail",
    "nb_trajectory_elems": 16,
    "latest_code": "def x_or_y(n, x, y):\n    '''\nA simple program which should return the value of x if n is\na prime number and should return the value of y otherwise.\nExamples:\nfor x_or_y(7, 34, 12) == 34\nfor x_or_y(15, 8, 5) == 5\n    '''\n    if n == 1:\n        return y\n    for i in range(2, n):\n    if n % i == 0:\n\n\n\n\n\n            return y\n            break\n    else:\n        return x"
  },
  {
    "task_id": "Python_2",
    "status": "pass",
    "nb_trajectory_elems": 4,
    "latest_code": "def truncate_number(number: float) -> float:\n    '''\nGiven a positive floating point number, it can be decomposed into\nand integer part (largest integer smaller than given number) and decimals\n(leftover part always smaller than 1).\nReturn the decimal part of the number.\n>>> truncate_number(3.5)\n0.5\n    '''\n    return number % 1.0"
  },
  {
    "task_id": "Python_144",
    "status": "pass",
    "nb_trajectory_elems": 13,
    "latest_code": "def simplify(x, n):\n    '''\nYour task is to implement a function that will simplify the expression\nx * n. The function returns True if x * n evaluates to a whole number and False\notherwise. Both x and n, are string representation of a fraction, and have the following format,\n<numerator>/<denominator> where both numerator and denominator are positive whole numbers.\nYou can assume that x, and n are valid fractions, and do not have zero as denominator.\nsimplify(\"1/5\", \"5/1\") = True\nsimplify(\"1/6\", \"2/1\") = False\nsimplify(\"7/10\", \"10/2\") = False\n    '''\n    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(d)\n\n    denom = int(d)\n\n    numerator = int(a) * int(c)\n    denom = int(b) * int(d)\n\n\n    if (numerator/denom == int(numerator/denom)):\n        return True\n    return False"
  },
  {
    "task_id": "Python_160",
    "status": "fail",
    "nb_trajectory_elems": 16,
    "latest_code": "def do_algebra(operator, operand):\n    '''\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n    '''\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n    expression += oprt + str(oprn)\n\n\n\n\n\n    return eval(expression)"
  },
  {
    "task_id": "Python_55",
    "status": "fail",
    "nb_trajectory_elems": 16,
    "latest_code": "def fib(n: int):\n    '''\nReturn n-th Fibonacci number.\n>>> fib(10)\n55\n>>> fib(1)\n1\n>>> fib(8)\n21\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n    return 1\n\n\n\n\n\n    return fib(n - 1) + fib(n - 2)"
  },
  {
    "task_id": "Python_139",
    "status": "fail",
    "nb_trajectory_elems": 16,
    "latest_code": "def special_factorial(n):\n    '''\nThe Brazilian factorial is defined as:\nbrazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n288\nThe function will receive an integer as input and should return the special\nfactorial of this integer.\n    '''\n    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n    i = n - i + 1\n\n\n\n\n\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact"
  },
  {
    "task_id": "Python_118",
    "status": "fail",
    "nb_trajectory_elems": 16,
    "latest_code": "def get_closest_vowel(word):\n    '''\nYou are given a word. Your task is to find the closest vowel that stands between\ntwo consonants from the right side of the word (case sensitive).\nVowels in the beginning and ending doesn't count. Return empty string if you didn't\nfind any vowel met the above condition.\nYou may assume that the given string contains English letter only.\nExample:\nget_closest_vowel(\"yogurt\") ==> \"u\"\nget_closest_vowel(\"FULL\") ==> \"U\"\nget_closest_vowel(\"quick\") ==> \"\"\nget_closest_vowel(\"ab\") ==> \"\"\n    '''\n    if len(word) < 3:\n    return \"\"\n\n\n\n\n\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \" \""
  },
  {
    "task_id": "Python_104",
    "status": "pass",
    "nb_trajectory_elems": 7,
    "latest_code": "def unique_digits(x):\n    '''\nGiven a list of positive integers x. return a sorted list of all\nelements that hasn't any even digit.\nNote: Returned list should be sorted in increasing order.\nFor example:\n>>> unique_digits([15, 33, 1422, 1])\n[1, 15, 33]\n>>> unique_digits([152, 323, 1422, 10])\n[]\n    '''\n    odd_digit_elements = []\n    for j, i in enumerate(x):\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    \n\n\n    return sorted(odd_digit_elements)"
  },
  {
    "task_id": "Python_97",
    "status": "pass",
    "nb_trajectory_elems": 4,
    "latest_code": "def multiply(a, b):\n    '''\nComplete the function that takes two integers and returns\nthe product of their unit digits.\nAssume the input is always valid.\nExamples:\nmultiply(148, 412) should return 16.\nmultiply(19, 28) should return 72.\nmultiply(2020, 1851) should return 0.\nmultiply(14,-15) should return 20.\n    '''\n    return (abs(a % 10) * abs(b % 10))"
  },
  {
    "task_id": "Python_53",
    "status": "pass",
    "nb_trajectory_elems": 4,
    "latest_code": "def add(x: int, y: int):\n    '''\nAdd two numbers x and y\n>>> add(2, 3)\n5\n>>> add(5, 7)\n12\n    '''\n    return x + y"
  },
  {
    "task_id": "Python_81",
    "status": "fail",
    "nb_trajectory_elems": 16,
    "latest_code": "def numerical_letter_grade(grades):\n    '''\nIt is the last week of the semester and the teacher has to give the grades\nto students. The teacher has been making her own algorithm for grading.\nThe only problem is, she has lost the code she used for grading.\nShe has given you a list of GPAs for some students and you have to write\na function that can output a list of letter grades using the following table:\nGPA       |    Letter grade\n4.0                A+\n> 3.7                A\n> 3.3                A-\n> 3.0                B+\n> 2.7                B\n> 2.3                B-\n> 2.0                C+\n> 1.7                C\n> 1.3                C-\n> 1.0                D+\n> 0.7                D\n> 0.0                D-\n0.0                E\nExample:\ngrade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    '''\n\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n    letter_grade.append(\"E\")\n\n\n\n\n\n    return letter_grade"
  },
  {
    "task_id": "Python_159",
    "status": "fail",
    "nb_trajectory_elems": 16,
    "latest_code": "def eat(number, need, remaining):\n    '''\nYou're a hungry rabbit, and you already have eaten a certain number of carrots,\nbut now you need to eat more carrots to complete the day's meals.\nyou should return an array of [ total number of eaten carrots after your meals,\nthe number of carrots left after your meals ]\nif there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\nExample:\n* eat(5, 6, 10) -> [11, 4]\n* eat(4, 8, 9) -> [12, 1]\n* eat(1, 10, 10) -> [11, 0]\n* eat(2, 11, 5) -> [7, 0]\nVariables:\n@number : integer\nthe number of carrots that you have eaten.\n@need : integer\nthe number of carrots that you need to eat.\n@remaining : integer\nthe number of remaining carrots thet exist in stock\nConstrain:\n* 0 <= number <= 1000\n* 0 <= need <= 1000\n* 0 <= remaining <= 1000\nHave fun :)\n    '''\n    return [ number + need , min(remaining, remaining - need)\n\n\n\n    return [ number + need , remaining - (need - (remaining - number))\n\n\n    else:\n        return [ number + need + remaining , 0]"
  },
  {
    "task_id": "Python_51",
    "status": "pass",
    "nb_trajectory_elems": 4,
    "latest_code": "def remove_vowels(text):\n    '''\nremove_vowels is a function that takes string and returns string without vowels.\n>>> remove_vowels('')\n''\n>>> remove_vowels(\"abcdef\\nghijklm\")\n'bcdf\\nghjklm'\n>>> remove_vowels('abcdef')\n'bcdf'\n>>> remove_vowels('aaaaa')\n''\n>>> remove_vowels('aaBAA')\n'B'\n>>> remove_vowels('zbcd')\n'zbcd'\n    '''\n    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])"
  },
  {
    "task_id": "Python_28",
    "status": "pass",
    "nb_trajectory_elems": 4,
    "latest_code": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    '''\nConcatenate list of strings into a single string\n>>> concatenate([])\n''\n>>> concatenate(['a', 'b', 'c'])\n'abc'\n    '''\n    return ''.join(strings)"
  },
  {
    "task_id": "Python_113",
    "status": "fail",
    "nb_trajectory_elems": 16,
    "latest_code": "def odd_count(lst):\n    '''\nGiven a list of strings, where each string consists of only digits, return a list.\nEach element i of the output should be \"the number of odd elements in the\nstring i of the input.\" where all the i's should be replaced by the number\nof odd digits in the i'th string of the input.\n>>> odd_count(['1234567'])\n[\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n>>> odd_count(['3',\"11111111\"])\n[\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n\"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    '''\n    res = []\n    for arr in lst:\n        n = sum(int(d)%2==1 for d in arr)\n    res.append(\"the number of odd elements \" + str(n) + \"n the str\" + str(n) + \"ng \" + str(n) + \" of the \" + str(n) + \"nput.\")\n\n\n\n\n\n    return res"
  },
  {
    "task_id": "Python_9",
    "status": "fail",
    "nb_trajectory_elems": 16,
    "latest_code": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    '''\nFrom a given list of integers, generate a list of rolling maximum element found until given moment\nin the sequence.\n>>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n[1, 2, 3, 3, 3, 4, 4]\n    '''\n    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n    running_max = max(running_max, n)\n\n\n\n\n\n\n        result.append(running_max)\n\n    return result"
  },
  {
    "task_id": "Python_68",
    "status": "pass",
    "nb_trajectory_elems": 4,
    "latest_code": "def pluck(arr):\n    '''\n\"Given an array representing a branch of a tree that has non-negative integer nodes\nyour task is to pluck one of the nodes and return it.\nThe plucked node should be the node with the smallest even value.\nIf multiple nodes with the same smallest even value are found return the node that has smallest index.\nThe plucked node should be returned in a list, [ smalest_value, its index ],\nIf there are no even values or the given array is empty, return [].\nExample 1:\nInput: [4,2,3]\nOutput: [2, 1]\nExplanation: 2 has the smallest even value, and 2 has the smallest index.\nExample 2:\nInput: [1,2,3]\nOutput: [2, 1]\nExplanation: 2 has the smallest even value, and 2 has the smallest index.\nExample 3:\nInput: []\nOutput: []\nExample 4:\nInput: [5, 0, 3, 0, 4, 2]\nOutput: [0, 1]\nExplanation: 0 is the smallest value, but  there are two zeros,\nso we will choose the first zero, which has the smallest index.\nConstraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value\n    '''\n    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]"
  },
  {
    "task_id": "Python_116",
    "status": "pass",
    "nb_trajectory_elems": 4,
    "latest_code": "def sort_array(arr):\n    '''\nIn this Kata, you have to sort an array of non-negative integers according to\nnumber of ones in their binary representation in ascending order.\nFor similar number of ones, sort based on decimal value.\nIt must be implemented like this:\n>>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n>>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n>>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    '''\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"
  },
  {
    "task_id": "Python_109",
    "status": "fail",
    "nb_trajectory_elems": 16,
    "latest_code": "def move_one_ball(arr):\n    '''\nWe have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\nnumbers in the array will be randomly ordered. Your task is to determine if\nit is possible to get an array sorted in non-decreasing order by performing\nthe following operation on the given array:\nYou are allowed to perform right shift operation any number of times.\nOne right shift operation means shifting all elements of the array by one\nposition in the right direction. The last element of the array will be moved to\nthe starting position in the array i.e. 0th index.\nIf it is possible to obtain the sorted array by performing the above operation\nthen return True else return False.\nIf the given array is empty then return True.\nNote: The given list is guaranteed to have unique elements.\nFor Example:\nmove_one_ball([3, 4, 5, 1, 2])==>True\nExplanation: By performin 2 right shift operations, non-decreasing order can\nbe achieved for the given array.\nmove_one_ball([3, 5, 4, 1, 2])==>False\nExplanation:It is not possible to get non-decreasing order for the given\narray by performing any number of right shift operations.\n    '''\n    if len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=sorted_array.index(min_value)\n    my_arr=arr[min_index:]+arr[:min_index]  \n\n\n\n\n\n    for i in range(len(arr)):\n      if my_arr[i]!=sorted_array[i]:\n        return False\n    return True"
  },
  {
    "task_id": "Python_50",
    "status": "pass",
    "nb_trajectory_elems": 4,
    "latest_code": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    '''\ntakes as input string encoded with encode_shift function. Returns decoded string.\n    '''\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"
  },
  {
    "task_id": "Python_6",
    "status": "fail",
    "nb_trajectory_elems": 16,
    "latest_code": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    '''\nInput to this function is a string represented multiple groups for nested parentheses separated by spaces.\nFor each of the group, output the deepest level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting while ((())) has three.\n>>> parse_nested_parens('(()()) ((())) () ((())()())')\n[2, 3, 1, 3]\n    '''\n    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                max_depth -= 1\n\n    return max_depth\n\n\n\n\n\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]"
  },
  {
    "task_id": "Python_76",
    "status": "fail",
    "nb_trajectory_elems": 16,
    "latest_code": "def is_simple_power(x, n):\n    '''\nYour task is to write a function that returns true if a number x is a simple\npower of n and false in other cases.\nx is a simple power of n if n**int=x\nFor example:\nis_simple_power(1, 4) => true\nis_simple_power(2, 2) => true\nis_simple_power(8, 2) => true\nis_simple_power(3, 2) => false\nis_simple_power(3, 1) => false\nis_simple_power(5, 3) => false\n    '''\n    if (n == 1): \n        return (x == 1) \n    power = 1\n    while (n < x): \n        power = power * n \n    return power == x"
  },
  {
    "task_id": "Python_124",
    "status": "fail",
    "nb_trajectory_elems": 16,
    "latest_code": "def valid_date(date):\n    '''\nYou have to write a function which validates a given date string and\nreturns True if the date is valid otherwise False.\nThe date is valid if all of the following rules are satisfied:\n1. The date string is not empty.\n2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n3. The months should not be less than 1 or higher than 12.\n4. The date should be in the format: mm-dd-yyyy\nfor example:\nvalid_date('03-11-2000') => True\nvalid_date('15-01-2012') => False\nvalid_date('04-0-2040') => False\nvalid_date('06-04-2020') => True\nvalid_date('06/04/2020') => False\n    '''\n    try:\n        date = date.strip()\n        day, month, year = date.split('-')\n        day, month, year = int(day), int(month), int(year)\n        if month < 1 or month > 12:\n            return False\n    if month in [1,3,5,7,8,10,12] and (day < 1 or day > 31):\n\n\n\n\n\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n    except:\n        return False\n\n    return True"
  },
  {
    "task_id": "Python_96",
    "status": "fail",
    "nb_trajectory_elems": 16,
    "latest_code": "def count_up_to(n):\n    '''\nImplement a function that takes an non-negative integer and returns an array of the first n\nintegers that are prime numbers and less than n.\nfor example:\ncount_up_to(5) => [2,3]\ncount_up_to(11) => [2,3,5,7]\ncount_up_to(0) => []\ncount_up_to(20) => [2,3,5,7,11,13,17,19]\ncount_up_to(1) => []\ncount_up_to(18) => [2,3,5,7,11,13,17]\n    '''\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n    if i % j == 0:\n\n\n\n\n\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes"
  },
  {
    "task_id": "Python_32",
    "status": "fail",
    "nb_trajectory_elems": 16,
    "latest_code": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return sum([coeff * math.pow(x, len(xs) - 1 - i) for i, coeff in enumerate(xs)])\n\n\n\n\n    \"\"\"\n    return sum([coeff * math.pow(x, len(xs) - 1 - i) for i, coeff in enumerate(xs)])\n\n\n\ndef find_zero(xs: list):\n    '''\nxs are coefficients of a polynomial.\nfind_zero find x such that poly(x) = 0.\nfind_zero returns only only zero point, even if there are many.\nMoreover, find_zero only takes list xs having even number of coefficients\nand largest non zero coefficient as it guarantees\na solution.\n>>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n-0.5\n>>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n1.0\n    '''\n    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while begin - end > 1e-10:\n        center = (begin + end) / 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin"
  },
  {
    "task_id": "Python_102",
    "status": "fail",
    "nb_trajectory_elems": 16,
    "latest_code": "def choose_num(x, y):\n    '''\nThis function takes two positive numbers x and y and returns the\nbiggest even integer number that is in the range [x, y] inclusive. If\nthere's no such number, then the function should return -1.\nFor example:\nchoose_num(12, 15) = 14\nchoose_num(13, 12) = -1\n    '''\n    return -1 if x > y else y if y % 2 == 0 else y - 1\n\n\n    return -1 if x > y else -1\n\n\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return x if x % 2 == 0 else x - 1"
  },
  {
    "task_id": "Python_106",
    "status": "fail",
    "nb_trajectory_elems": 16,
    "latest_code": "def f(n):\n    '''\nImplement the function f that takes n as a parameter,\nand returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\nor the sum of numbers from 1 to i otherwise.\ni starts from 1.\nthe factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\nExample:\nf(5) == [1, 2, 6, 24, 15]\n    '''\n    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n    for j in range(1, i + 1): x *= j\n\n\n\n\n\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret"
  },
  {
    "task_id": "Python_60",
    "status": "pass",
    "nb_trajectory_elems": 4,
    "latest_code": "def sum_to_n(n: int):\n    '''\nsum_to_n is a function that sums numbers from 1 to n.\n>>> sum_to_n(30)\n465\n>>> sum_to_n(100)\n5050\n>>> sum_to_n(5)\n15\n>>> sum_to_n(10)\n55\n>>> sum_to_n(1)\n1\n    '''\n    return sum(range(1, n + 1))"
  },
  {
    "task_id": "Python_132",
    "status": "fail",
    "nb_trajectory_elems": 16,
    "latest_code": "def is_nested(string):\n    '''\nCreate a function that takes a string as input which contains only square brackets.\nThe function should return True if and only if there is a valid subsequence of brackets\nwhere at least one bracket in the subsequence is nested.\nis_nested('[[]]') \u279e True\nis_nested('[]]]]]]][[[[[]') \u279e False\nis_nested('[][]') \u279e False\nis_nested('[]') \u279e False\nis_nested('[[][]]') \u279e True\nis_nested('[[]][[') \u279e True\n    '''\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n    if string[i] == '[':\n\n\n\n\n\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2"
  },
  {
    "task_id": "Python_129",
    "status": "fail",
    "nb_trajectory_elems": 16,
    "latest_code": "def minPath(grid, k):\n    '''\nGiven a grid with N rows and N columns (N >= 2) and a positive integer k,\neach cell of the grid contains a value. Every integer in the range [1, N * N]\ninclusive appears exactly once on the cells of the grid.\nYou have to find the minimum path of length k in the grid. You can start\nfrom any cell, and in each step you can move to any of the neighbor cells,\nin other words, you can go to cells which share an edge with you current\ncell.\nPlease note that a path of length k means visiting exactly k cells (not\nnecessarily distinct).\nYou CANNOT go off the grid.\nA path A (of length k) is considered less than a path B (of length k) if\nafter making the ordered lists of the values on the cells that A and B go\nthrough (let's call them lst_A and lst_B), lst_A is lexicographically less\nthan lst_B, in other words, there exist an integer index i (1 <= i <= k)\nsuch that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\nlst_A[j] = lst_B[j].\nIt is guaranteed that the answer is unique.\nReturn an ordered list of the values on the cells that the minimum path go through.\nExamples:\nInput: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\nOutput: [1, 2, 1]\nInput: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\nOutput: [1]\n    '''\n    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i][j])\n\n                if j != 0:\n                    temp.append(grid[i][j])\n\n                if i != n - 1:\n                    temp.append(grid[i][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n    ans.append(grid[0][i % n])\n\n\n\n\n\n        else:\n            ans.append(val)\n    return ans"
  },
  {
    "task_id": "Python_75",
    "status": "fail",
    "nb_trajectory_elems": 16,
    "latest_code": "def is_multiply_prime(a):\n    '''\nWrite a function that returns true if the given number is the multiplication of 3 prime numbers\nand false otherwise.\nKnowing that (a) is less then 100.\nExample:\nis_multiply_prime(30) == True\n30 = 2 * 3 * 5\n    '''\n    def is_prime(n):\n    return True\n\n\n\n\n\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False"
  },
  {
    "task_id": "Python_121",
    "status": "pass",
    "nb_trajectory_elems": 4,
    "latest_code": "def solution(lst):\n    '''\nGiven a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\nExamples\nsolution([5, 8, 7, 1]) ==> 12\nsolution([3, 3, 3, 3, 3]) ==> 9\nsolution([30, 13, 24, 321]) ==>0\n    '''\n    return sum([x for idx, x in enumerate(lst) if idx % 2 == 0 and x % 2 == 1])"
  },
  {
    "task_id": "Python_43",
    "status": "fail",
    "nb_trajectory_elems": 16,
    "latest_code": "def pairs_sum_to_zero(l):\n    '''\npairs_sum_to_zero takes a list of integers as an input.\nit returns True if there are two distinct elements in the list that\nsum to zero, and False otherwise.\n>>> pairs_sum_to_zero([1, 3, 5, 0])\nFalse\n>>> pairs_sum_to_zero([1, 3, -2, 1])\nFalse\n>>> pairs_sum_to_zero([1, 2, 3, 7])\nFalse\n>>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\nTrue\n>>> pairs_sum_to_zero([1])\nFalse\n    '''\n    for i, l1 in enumerate(l):\n    for j in range(i + 1, len(l)):\n\n\n\n\n\n            if l1 + l[j] == 0:\n                return True\n    return False"
  },
  {
    "task_id": "Python_18",
    "status": "pass",
    "nb_trajectory_elems": 4,
    "latest_code": "def how_many_times(string: str, substring: str) -> int:\n    '''\nFind how many times a given substring can be found in the original string. Count overlaping cases.\n>>> how_many_times('', 'a')\n0\n>>> how_many_times('aaa', 'a')\n3\n>>> how_many_times('aaaa', 'aa')\n3\n    '''\n    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times"
  },
  {
    "task_id": "Python_15",
    "status": "pass",
    "nb_trajectory_elems": 4,
    "latest_code": "def string_sequence(n: int) -> str:\n    '''\nReturn a string containing space-delimited numbers starting from 0 upto n inclusive.\n>>> string_sequence(0)\n'0'\n>>> string_sequence(5)\n'0 1 2 3 4 5'\n    '''\n    return ' '.join([str(x) for x in range(n + 1)])"
  },
  {
    "task_id": "Python_46",
    "status": "pass",
    "nb_trajectory_elems": 4,
    "latest_code": "def fib4(n: int):\n    '''\nThe Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfib4(0) -> 0\nfib4(1) -> 0\nfib4(2) -> 2\nfib4(3) -> 0\nfib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\nPlease write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n>>> fib4(5)\n4\n>>> fib4(6)\n8\n>>> fib4(7)\n14\n    '''\n    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]"
  },
  {
    "task_id": "Python_163",
    "status": "pass",
    "nb_trajectory_elems": 4,
    "latest_code": "def generate_integers(a, b):\n    '''\nGiven two positive integers a and b, return the even digits between a\nand b, in ascending order.\nFor example:\ngenerate_integers(2, 8) => [2, 4, 6, 8]\ngenerate_integers(8, 2) => [2, 4, 6, 8]\ngenerate_integers(10, 14) => []\n    '''\n    lower = max(2, min(a, b))\n    upper = min(10, max(a, b))\n\n\n    return [i for i in range(lower, upper) if i % 2 == 0]"
  },
  {
    "task_id": "Python_23",
    "status": "pass",
    "nb_trajectory_elems": 4,
    "latest_code": "def strlen(string: str) -> int:\n    '''\nReturn length of given string\n>>> strlen('')\n0\n>>> strlen('abc')\n3\n    '''\n    return len(string)"
  },
  {
    "task_id": "Python_119",
    "status": "pass",
    "nb_trajectory_elems": 4,
    "latest_code": "def match_parens(lst):\n    '''\nYou are given a list of two strings, both strings consist of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check if it is possible to concatenate the two strings in\nsome order, that the resulting string will be good.\nA string S is considered to be good if and only if all parentheses in S\nare balanced. For example: the string '(())()' is good, while the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string, and return 'No' otherwise.\nExamples:\nmatch_parens(['()(', ')']) == 'Yes'\nmatch_parens([')', ')']) == 'No'\n    '''\n    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'"
  },
  {
    "task_id": "Python_25",
    "status": "pass",
    "nb_trajectory_elems": 4,
    "latest_code": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    '''\nReturn list of prime factors of given integer in the order from smallest to largest.\nEach of the factors should be listed number of times corresponding to how many times it appeares in factorization.\nInput number should be equal to the product of all factors\n>>> factorize(8)\n[2, 2, 2]\n>>> factorize(25)\n[5, 5]\n>>> factorize(70)\n[2, 5, 7]\n    '''\n    import math\n    fact = []\n    i = 2\n\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact"
  },
  {
    "task_id": "Python_125",
    "status": "fail",
    "nb_trajectory_elems": 16,
    "latest_code": "def split_words(txt):\n    '''\nGiven a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\nshould split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\nsplit_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\nsplit_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\nsplit_words(\"abcdef\") == 3\n    '''\n    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n    return txt.split(',')\n\n\n\n\n\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])"
  },
  {
    "task_id": "Python_39",
    "status": "fail",
    "nb_trajectory_elems": 16,
    "latest_code": "def prime_fib(n: int):\n    '''\nprime_fib returns n-th number that is a Fibonacci number and it's also prime.\n>>> prime_fib(1)\n2\n>>> prime_fib(2)\n3\n>>> prime_fib(3)\n5\n>>> prime_fib(4)\n13\n>>> prime_fib(5)\n89\n    '''\n    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)), p)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n    return f[-2]"
  },
  {
    "task_id": "Python_103",
    "status": "fail",
    "nb_trajectory_elems": 16,
    "latest_code": "def rounded_avg(n, m):\n    '''\nYou are given two positive integers n and m, and your task is to compute the\naverage of the integers from n through m (including n and m).\nRound the answer to the nearest integer and convert that to binary.\nIf n is greater than m, return -1.\nExample:\nrounded_avg(1, 5) => \"0b11\"\nrounded_avg(7, 5) => -1\nrounded_avg(10, 20) => \"0b1111\"\nrounded_avg(20, 33) => \"0b11010\"\n    '''\n    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))}"
  },
  {
    "task_id": "Python_63",
    "status": "fail",
    "nb_trajectory_elems": 16,
    "latest_code": "def fibfib(n: int):\n    '''\nThe FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfibfib(0) == 0\nfibfib(1) == 0\nfibfib(2) == 1\nfibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\nPlease write a function to efficiently compute the n-th element of the fibfib number sequence.\n>>> fibfib(1)\n0\n>>> fibfib(5)\n4\n>>> fibfib(8)\n24\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n    return 1\n\n\n\n\n\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)"
  },
  {
    "task_id": "Python_85",
    "status": "pass",
    "nb_trajectory_elems": 7,
    "latest_code": "def add(lst):\n    '''\nGiven a non-empty list of integers lst. add the even elements that are at odd indices..\nExamples:\nadd([4, 2, 6, 7]) ==> 2\n    '''\n    return sum([lst[i] for i in range(len(lst)) if i % 2 == 1 and lst[i] % 2 == 0])"
  },
  {
    "task_id": "Python_42",
    "status": "pass",
    "nb_trajectory_elems": 4,
    "latest_code": "def incr_list(l: list):\n    '''\nReturn list with elements incremented by 1.\n>>> incr_list([1, 2, 3])\n[2, 3, 4]\n>>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n[6, 4, 6, 3, 4, 4, 10, 1, 124]\n    '''\n    return [(e + 1) for e in l]"
  },
  {
    "task_id": "Python_107",
    "status": "pass",
    "nb_trajectory_elems": 4,
    "latest_code": "def even_odd_palindrome(n):\n    '''\nGiven a positive integer n, return a tuple that has the number of even and odd\ninteger palindromes that fall within the range(1, n), inclusive.\nExample 1:\nInput: 3\nOutput: (1, 2)\nExplanation:\nInteger palindrome are 1, 2, 3. one of them is even, and two of them are odd.\nExample 2:\nInput: 12\nOutput: (4, 6)\nExplanation:\nInteger palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\nNote:\n1. 1 <= n <= 10^3\n2. returned tuple has the number of even and odd integer palindromes respectively.\n    '''\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n + 1):\n\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)"
  },
  {
    "task_id": "Python_82",
    "status": "pass",
    "nb_trajectory_elems": 4,
    "latest_code": "def prime_length(string):\n    '''\nWrite a function that takes a string and returns True if the string\nlength is a prime number or False otherwise\nExamples\nprime_length('Hello') == True\nprime_length('abcdcba') == True\nprime_length('kittens') == True\nprime_length('orange') == False\n    '''\n    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, int(l**0.5) + 1):\n\n        if l % i == 0:\n            return False\n    return True"
  },
  {
    "task_id": "Python_154",
    "status": "fail",
    "nb_trajectory_elems": 16,
    "latest_code": "def cycpattern_check(a , b):\n    '''\nYou are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\ncycpattern_check(\"abcd\",\"abd\") => False\ncycpattern_check(\"hello\",\"ell\") => True\ncycpattern_check(\"whassup\",\"psus\") => False\ncycpattern_check(\"abab\",\"baa\") => True\ncycpattern_check(\"efef\",\"eeff\") => False\ncycpattern_check(\"himenss\",\"simen\") => True\n    '''\n    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n    for j in range(len(b)):\n\n\n\n\n\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n    return False"
  },
  {
    "task_id": "Python_99",
    "status": "fail",
    "nb_trajectory_elems": 16,
    "latest_code": "def closest_integer(value):\n    '''\nCreate a function that takes a value (string) representing a number\nand returns the closest integer to it. If the number is equidistant\nfrom two integers, round it away from zero.\nExamples\n>>> closest_integer(\"10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means that if the given number is equidistant\nfrom two integers, the one you should return is the one that is the\nfarthest from zero. For example closest_integer(\"14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-1] == '5':\n\n\n\n\n\n        if num > 0:\n            res = floor(num)\n        else:\n            res = ceil(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res"
  },
  {
    "task_id": "Python_115",
    "status": "pass",
    "nb_trajectory_elems": 4,
    "latest_code": "def max_fill(grid, capacity):\n    import math\n    '''\nYou are given a rectangular grid of wells. Each row represents a single well,\nand each 1 in a row represents a single unit of water.\nEach well has a corresponding bucket that can be used to extract water from it,\nand all buckets have the same capacity.\nYour task is to use the buckets to empty the wells.\nOutput the number of times you need to lower the buckets.\nExample 1:\nInput:\ngrid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\nbucket_capacity : 1\nOutput: 6\nExample 2:\nInput:\ngrid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\nbucket_capacity : 2\nOutput: 5\nExample 3:\nInput:\ngrid : [[0,0,0], [0,0,0]]\nbucket_capacity : 5\nOutput: 0\nConstraints:\n* all wells have the same length\n* 1 <= grid.length <= 10^2\n* 1 <= grid[:,1].length <= 10^2\n* grid[i][j] -> 0 | 1\n* 1 <= capacity <= 10\n    '''\n    return sum(math.ceil(sum(arr) / capacity) for arr in grid)"
  },
  {
    "task_id": "Python_66",
    "status": "pass",
    "nb_trajectory_elems": 4,
    "latest_code": "def digitSum(s):\n    '''\nTask\nWrite a function that takes a string as input and returns the sum of the upper characters only'\nASCII codes.\nExamples:\ndigitSum(\"\") => 0\ndigitSum(\"abAB\") => 131\ndigitSum(\"abcCd\") => 67\ndigitSum(\"helloE\") => 69\ndigitSum(\"woArBld\") => 131\ndigitSum(\"aAaaaXa\") => 153\n    '''\n    if s == \"\": return 0\n    return sum(ord(char) for char in s if char.isupper())"
  },
  {
    "task_id": "Python_27",
    "status": "pass",
    "nb_trajectory_elems": 4,
    "latest_code": "def flip_case(string: str) -> str:\n    '''\nFor a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n>>> flip_case('Hello')\n'hELLO'\n    '''\n    return string.swapcase()"
  },
  {
    "task_id": "Python_29",
    "status": "pass",
    "nb_trajectory_elems": 4,
    "latest_code": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    '''\nFilter an input list of strings only for ones that start with a given prefix.\n>>> filter_by_prefix([], 'a')\n[]\n>>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n['abc', 'array']\n    '''\n    return [x for x in strings if x.startswith(prefix)]"
  }
]